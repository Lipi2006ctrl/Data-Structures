#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* prev;
    Node* next;
};

// Insert node at beginning
void insertAtBeginning(Node** head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->prev = nullptr;
    newNode->next = *head;

    if (*head != nullptr) {
        (*head)->prev = newNode;
    }

    *head = newNode;
}

// Insert node at end
void insertAtEnd(Node** head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = nullptr;

    if (*head == nullptr) {
        newNode->prev = nullptr;
        *head = newNode;
        return;
    }

    Node* temp = *head;
    while (temp->next != nullptr) {
        temp = temp->next;
    }

    temp->next = newNode;
    newNode->prev = temp;
}

// Insert node at nth position
void insertAtPosition(Node** head, int value, int pos) {
    if (pos <= 1 || *head == nullptr) {
        insertAtBeginning(head, value);
        return;
    }

    Node* temp = *head;
    int count = 1;

    // Traverse to (pos-1)th node or last node
    while (temp->next != nullptr && count < pos - 1) {
        temp = temp->next;
        count++;
    }

    // If end reached, insert at end
    if (temp->next == nullptr) {
        insertAtEnd(head, value);
        return;
    }

    // Create new node
    Node* newNode = new Node();
    newNode->data = value;

    // Insert between temp and temp->next
    newNode->next = temp->next;
    newNode->prev = temp;
    temp->next->prev = newNode;
    temp->next = newNode;
}

// Display the list
void display(Node* head) {
    Node* temp = head;
    cout << "Doubly Linked List: ";
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;

    insertAtEnd(&head, 10);
    insertAtEnd(&head, 20);
    insertAtEnd(&head, 40);

    display(head);

    insertAtPosition(&head, 5, 1);   // Insert at beginning
    insertAtPosition(&head, 30, 3);  // Insert in middle
    insertAtPosition(&head, 50, 10); // Insert at end (position too large)

    display(head);

    return 0;
}
