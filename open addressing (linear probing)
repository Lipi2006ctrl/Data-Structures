#include <iostream>
using namespace std;

#define SIZE 10  // Size of the hash table

class HashTable {
    int table[SIZE];  // Array to store keys

public:
    // Constructor
    HashTable() {
        for (int i = 0; i < SIZE; i++)
            table[i] = -1; // -1 indicates empty slot
    }

    // Hash function
    int hashFunction(int key) {
        return key % SIZE;
    }

    // Insert a key into the hash table
    void insert(int key) {
        int index = hashFunction(key);

        // Linear probing
        int i = 0;
        while (table[(index + i) % SIZE] != -1) {
            i++;
            if (i == SIZE) {
                cout << "Hash table is full!\n";
                return;
            }
        }

        table[(index + i) % SIZE] = key;
        cout << "Inserted " << key << " at index " << (index + i) % SIZE << endl;
    }

    // Search for a key
    void search(int key) {
        int index = hashFunction(key);
        int i = 0;

        while (table[(index + i) % SIZE] != -1) {
            if (table[(index + i) % SIZE] == key) {
                cout << "Key " << key << " found at index " << (index + i) % SIZE << endl;
                return;
            }
            i++;
            if (i == SIZE) break;
        }

        cout << "Key " << key << " not found!\n";
    }

    // Display the hash table
    void display() {
        cout << "\nHash Table:\n";
        for (int i = 0; i < SIZE; i++) {
            cout << i << " --> ";
            if (table[i] != -1)
                cout << table[i];
            cout << endl;
        }
    }
};

int main() {
    HashTable ht;
    int choice, key;

    while (true) {
        cout << "\n1. Insert\n2. Search\n3. Display\n4. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter key to insert: ";
            cin >> key;
            ht.insert(key);
            break;
        case 2:
            cout << "Enter key to search: ";
            cin >> key;
            ht.search(key);
            break;
        case 3:
            ht.display();
            break;
        case 4:
            return 0;
        default:
            cout << "Invalid choice!\n";
        }
    }
}
