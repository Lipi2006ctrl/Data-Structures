#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
};

class Stack {
private:
    Node* top;   // pointer to top of stack

public:
    Stack() {
        top = nullptr;
    }

    // Push operation
    void push(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = top;   // new node points to old top
        top = newNode;         // top is updated
        cout << "Pushed: " << value << endl;
    }

    // Pop operation
    void pop() {
        if (top == nullptr) {
            cout << "Stack Underflow!" << endl;
        } else {
            cout << "Popped: " << top->data << endl;
            Node* temp = top;
            top = top->next;
            delete temp;
        }
    }

    // Peek operation
    void peek() {
        if (top == nullptr) {
            cout << "Stack is empty!" << endl;
        } else {
            cout << "Top element: " << top->data << endl;
        }
    }

    // Display stack
    void display() {
        if (top == nullptr) {
            cout << "Stack is empty!" << endl;
        } else {
            cout << "Stack elements: ";
            Node* temp = top;
            while (temp != nullptr) {
                cout << temp->data << " ";
                temp = temp->next;
            }
            cout << endl;
        }
    }
};

// Main function
int main() {
    Stack s;

    s.push(10);
    s.push(20);
    s.push(30);

    s.display();
    s.peek();

    s.pop();
    s.display();

    return 0;
}
