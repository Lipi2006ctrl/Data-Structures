#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* prev;
    Node* next;
};

// Function to delete node from beginning
void deleteAtBeginning(Node*& head) {
    if (head == nullptr) {
        cout << "List is empty! Nothing to delete." << endl;
        return;
    }

    Node* temp = head;
    head = head->next;  // Move head to next node

    if (head != nullptr) {
        head->prev = nullptr; // Update new head's prev
    }

    delete temp; // Free memory
    cout << "Node deleted from beginning." << endl;
}

// Utility function to insert node at end
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node{value, nullptr, nullptr};

    if (head == nullptr) {
        head = newNode;
        return;
    }

    Node* temp = head;
    while (temp->next != nullptr) {
        temp = temp->next;
    }

    temp->next = newNode;
    newNode->prev = temp;
}

// Utility function to display list
void display(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;

    // Insert some nodes
    insertAtEnd(head, 10);
    insertAtEnd(head, 20);
    insertAtEnd(head, 30);

    cout << "Original List: ";
    display(head);

    // Delete node from beginning
    deleteAtBeginning(head);

    cout << "After Deletion: ";
    display(head);

    return 0;
}
